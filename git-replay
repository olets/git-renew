#!/usr/bin/env zsh

# git-replay
# copyright 2020 Henry Bley-Vroman
#
# Automate Git rebases and stage creation
# https://github.com/olets/git-replay


delete_backup() {
  local -a branches

  branches=( ${(f)"$(git for-each-ref --format='%(refname:short)' refs/heads/$BACKUP_PREFIX)"} )
  [[ -z $branches ]] && log_message "No backup found" && return

  log_message "Deleting backup..."
  run git branch ${quiet:+--quiet} -D $branches
}

log_divergence() {
  # Input: a branch name
  #
  # If the branch has diverged from its upstream, say so immediately
  # and at the of the script

  # Commit ID for the upstream, if there is an upstream
  local message
  local upstream
  upstream=$(git rev-parse $1@{u} 2>/dev/null)

  # If there's an upstream and its commit ID is not the same as the local branch's
  if [[ -n $upstream && $upstream != $(git rev-parse $1) ]]; then
    message="$warn_color${prefix}$1 has diverged from its upstream%f"
    (( quieter )) || print -P $message
    messages+="$message\\n"
  fi
}

log_error() {
  log_error $1
}

log_message() {
  print -P "$log_color${prefix}$1%f"
}

main() {
  local -a commands
  local opt

  for opt in $@; do
    case $opt in
      clean)
        clean=1
        shift
        ;;
      --dry-run|\
      -n)
        dry_run=1
        shift
        ;;
      --help|\
      -h|\
      help)
        help
        exit
        ;;
      --quiet|\
      -q)
        quiet=true
        shift
        ;;
      --quieter|\
      -qq)
        quiet=true
        quieter=1
        shift
        ;;
      --back-up)
        back_up=1
        ;;
      rebase)
        rebase_only=1
        shift
        ;;
      restore)
        restore=1
        shift
        ;;
      stage)
        stage_only=1
        shift
        ;;
      --version|\
      -v|\
      version)
        print_version
        exit
        ;;
      *)
        file=$opt
        shift
        ;;
    esac
  done

  if (( rebase_only && stage_only )); then
    log_error "Incompatible options"
    return
  fi

  if [[ -z $root ]]; then
    log_error "Not a Git repo"
    return
  fi

  if ! [[ -f $file ]]; then
    log_error "Could not find the file $file"
    return
  fi

  ! (( stage_only )) && get_rebase_cmds
  ! (( rebase_only )) && get_stage_cmds

  cmds=( $rebase_cmds )
  cmds+=( $stage_cmds )

  write_todos $cmds #todo

  for cmd in $cmds; do
    run cmd \
      && complete_todo # todo
  done

  status #todo

  clear_todos # todo

  # if (( restore )); then
  #   restore_backup
  #   return $?
  # elif (( clean )); then
  #   delete_backup
  #   return $?
  # fi

  # (( dry_run )) && prefix+="*Dry run* "
  # rebase
  # (( $? )) || stage

  # if [[ -n $messages ]]; then
  #   print -P \\n$messages
  # fi
}

print_version() {
  print $VERSION
}

rebase() {
  local branch
  local branch_value
  local -a branch_values
  local exit_code
  local upstream
  local upstream_path
  local -a upstream_paths

  # Return early if there are no branches to rebase
  [[ -n $(yq r git-replay.yaml 'rebase.*.*') ]] || return 0

  log_message "Rebasing..."

  upstream_paths=( ${(f)"$(yq r --printMode p $file 'rebase.*')"} )

  for upstream_path in $upstream_paths; do
    branch_values=( ${(f)"$(yq r $file $upstream_path)"} )
    upstream=${upstream_path#rebase.}
    for branch_value in $branch_values; do
      branch=${branch_value#- }

      save_backup || return 1

      run git rebase --rerere-autoupdate ${quiet:+--quiet} ${upstream_path#rebase.} $branch
      exit_code=$?

      if [[ $exit_code == 128 ]]; then
        # fatal Git error
        return 1
      elif (( $? && ! dry_run )); then
        resolve_conflict || return 1
      fi

      (( dry_run )) || log_divergence $branch
    done
  done
}

resolve_conflict() {
  local conflicted_files

  conflicted_files=$(git diff --name-only --diff-filter=U)

  if [[ $(git config rerere.enabled) == true \
        && -n $conflicted_files \
        && -z $(git rerere remaining) ]]; then
    (( quieter )) || log_message "Attempting automatic continuation"

    log_message "All conflicts resolved by git-rerere"
    if [[ -n $conflicted_files ]]; then
      run git add $conflicted_files \
        || return 1
    else
      run git commit ${quiet:+--quiet} --no-edit \
        || return 1
    fi
  else
    return 1
  fi

  return 0
}

restore_backup() {
  local branch
  local -a branch_paths

  log_message "Restoring backup..."

  # rebased branches
  branch_paths=( ${(f)"$(yq r $file 'rebase.*.*')"} )
  # stage branches
  branch_paths+=( ${(f)"$(yq r $file --printMode p 'stage.*.*')"} )

  for branch_path in $branch_paths; do
    branch=${branch_path##*.} # stage branches have prefix `stage.<start-point>.`

    if [[ -n $(git for-each-ref --format='%(refname:short)' refs/heads/$BACKUP_PREFIX$branch) ]]; then
      run git switch ${quiet:+--quiet} -C $branch $BACKUP_PREFIX/$branch \
        || return 1
    else
      log_message "No backup found for the branch '$branch'"
    fi
  done

  delete_backup
}

run() {
  # Input: a command
  #
  # log_message the command, run it, log_message whether it
  # succeeded or failed, and return its return 1 code.
  # Drop-in replacement for just running it.

  local -i exit_code

  (( quieter )) || print -P "$run_color$prefix$@%f"
  (( dry_run )) && return 0
  $@
  exit_code=$?

  return $exit_code
}

save_backup() {
  (( back_up )) || return 0

  run git branch ${quiet:+--quiet} --force git-replay/$branch $branch
  return $?
}

stage() {
  local branch
  local branch_path
  local -a branch_paths
  local commit
  local commit_path
  local -a commit_paths
  local start_point
  local start_point_path
  local -a start_point_paths

  # Return early if there are no branches to stage
  [[ -z $(yq r git-replay.yaml 'stage.*.*.*') ]] && return 0

  log_message "Staging..."

  start_point_paths=( ${(f)"$(yq r --printMode p $file 'stage.*')"} )

  for start_point_path in $start_point_paths; do
    start_point=${start_point_path#stage.}
    branch_paths=( ${(f)"$(yq r --printMode p $file $start_point_path.\*)"} )

    for branch_path in $branch_paths; do
      branch=${branch_path#$start_point_path.}
      commit_paths=( ${(f)"$(yq r $file $branch_path.\*)"} )

      save_backup || return 1

      run git switch ${quiet:+--quiet} -C $branch $start_point
      (( $? )) && exit

      for commit_path in $commit_paths; do
        commit=${commit_path}

        run git merge ${quiet:+--quiet} --rerere-autoupdate --no-ff --no-edit $commit

        if (( $? && ! dry_run )); then
          resolve_conflict || return 1
        fi
      done

      (( dry_run )) || log_divergence $branch
      run git switch ${quiet:+--quiet} -
    done
  done
}

help() {
  man git-replay 2>/dev/null \
    || 'command' 'cat' ${0:A:h}/man/git-replay.txt | 'command' 'less' -F
}

'builtin' 'setopt' prompt_percent

readonly BACKUP_PREFIX="git-replay"
readonly VERSION="1.0.0"

typeset -i back_up
typeset -i clean
typeset -i dry_run
log_color=
messages=
prefix="  â–¶ "
quiet= # Boolean but no default value
typeset -i quieter
typeset -a rebase_cmds
typeset -i rebase_only
typeset -i restore
root=$(git rev-parse --show-toplevel 2>/dev/null)
run_color=
typeset -a stage_cmds
typeset -i stage_only
warn_color=

[[ -z $root ]] && return
file=$root/git-replay.yaml

if ! (( ${+NO_COLOR} )); then
  autoload -U colors && colors
  log_color="%F{magenta}"
  run_color="%F{blue}"
  warn_color="%F{yellow}"
fi

main $@
